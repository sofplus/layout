function .tetris_load(~slot)
{
	sp_sc_func_exec fn_tet_OneTimeVars
}


//x==4 is the location where the 'rotTile' is spawned
function fn_tet_OneTimeVars
{
	set _tet_bool "0"
	//used to say if a frame is used to spend creating a shape, dont apply gravity here
	set _tet_spawn "0"

	set _tet_jug_width "10"
	set _tet_jug_height "19" //18+1 offscreen at top to allow instant rotation

	set _tet_block_size "26"

	set _tet_loop_run "0"
	set _tet_loop_busy "0"
	set _tet_loop_speed "1000"

	set _tet_pics_1 "rr"
	set _tet_pics_2 "yy"
	set _tet_pics_3 "gg"
	set _tet_pics_4 "bb"
	set _tet_pics_5 "ll"
	set _tet_pics_6 "oo"
	set _tet_pics_7 "pp"

}

function fn_tet_ReloadGame
{
	//clear entire jug
	set ~i 0
	sp_sc_flow_while number cvar ~i < cvar _tet_jug_height
	{
		set _tet_jug_line_$i "0000000000"
		add ~i 1
	}

	zero _tet_seg_x_1;zero _tet_seg_y_1
	zero _tet_seg_x_2;zero _tet_seg_y_2
	zero _tet_seg_x_3;zero _tet_seg_y_3
	zero _tet_seg_x_4;zero _tet_seg_y_4

	zero _tet_seg_base
	zero _tet_shape
}
//shapes defined from left to right in chain if possible
function fn_tet_Spawn()
{
	say "fn_tet_spawn"
	sp_sc_cvar_random_int ~rand 1 7
	sp_sc_cvar_copy _tet_shape ~rand
	//square
	sp_sc_flow_if number cvar ~rand == val "1"
	{
		set _tet_seg_x_1 "4";set _tet_seg_y_1 "17"
		set _tet_seg_x_2 "4";set _tet_seg_y_2 "16"
		set _tet_seg_x_3 "5";set _tet_seg_y_3 "17"
		set _tet_seg_x_4 "5";set _tet_seg_y_4 "16"
		//there is no base(special case for square)
		set _tet_seg_base "0"
	}
	//middle_finger
	sp_sc_flow_if number cvar ~rand == val "2"
	{
		set _tet_seg_x_1 "3";set _tet_seg_y_1 "17"
		set _tet_seg_x_2 "4";set _tet_seg_y_2 "17"
		set _tet_seg_x_3 "4";set _tet_seg_y_3 "16"
		set _tet_seg_x_4 "5";set _tet_seg_y_4 "17"
		set _tet_seg_base "2"
	}
	//z
	sp_sc_flow_if number cvar ~rand == val "3"
	{
		set _tet_seg_x_1 "3";set _tet_seg_y_1 "17"
		set _tet_seg_x_2 "4";set _tet_seg_y_2 "17"
		set _tet_seg_x_3 "4";set _tet_seg_y_3 "16"
		set _tet_seg_x_4 "5";set _tet_seg_y_4 "16"
		set _tet_seg_base "2"
	}
	//L
	sp_sc_flow_if number cvar ~rand == val "4"
	{
		set _tet_seg_x_1 "3";set _tet_seg_y_1 "16"
		set _tet_seg_x_2 "3";set _tet_seg_y_2 "17"
		set _tet_seg_x_3 "4";set _tet_seg_y_3 "17"
		set _tet_seg_x_4 "5";set _tet_seg_y_4 "17"
		set _tet_seg_base "3"
	}
	//s
	sp_sc_flow_if number cvar ~rand == val "5"
	{
		set _tet_seg_x_1 "3";set _tet_seg_y_1 "16"
		set _tet_seg_x_2 "4";set _tet_seg_y_2 "17"
		set _tet_seg_x_3 "4";set _tet_seg_y_3 "16"
		set _tet_seg_x_4 "5";set _tet_seg_y_4 "17"
		set _tet_seg_base "2"
	}
	//line
	sp_sc_flow_if number cvar ~rand == val "6"
	{
		set _tet_seg_x_1 "3";set _tet_seg_y_1 "16"
		set _tet_seg_x_2 "4";set _tet_seg_y_2 "16"
		set _tet_seg_x_3 "5";set _tet_seg_y_3 "16"
		set _tet_seg_x_4 "6";set _tet_seg_y_4 "16"
		set _tet_seg_base "2"
	}
	//reversed L
	sp_sc_flow_if number cvar ~rand == val "7"
	{
		set _tet_seg_x_1 "3";set _tet_seg_y_1 "16"
		set _tet_seg_x_2 "4";set _tet_seg_y_2 "16"
		set _tet_seg_x_3 "5";set _tet_seg_y_3 "16"
		set _tet_seg_x_4 "5";set _tet_seg_y_4 "17"
		set _tet_seg_base "2"
	}
}
//0=empty
//1=red(square)
//2=yellow(_|_)
//3=green(z)
//4=blue(L)
//5=lightblue(s)
//6=orange(line)
//7=pink(reversed L)
function fn_tet_WriteToJug(~x,~y,~val)
{
	//get what is before insert point
	sp_sc_cvar_substr ~tmp _tet_jug_line_$~y 0 #~x
	//append new value to that
	sp_sc_cvar_append ~tmp #~val
	//get what is after insert point
	add ~x 1;sp_sc_cvar_copy ~tmp3 _tet_jug_width;sp_sc_cvar_math_sub ~tmp3 #~x;sp_sc_cvar_substr ~tmp2 _tet_jug_line_$~y #~x #~tmp3
	//append that to the tmp cvar
	sp_sc_cvar_append ~tmp #~tmp2

	sp_sc_cvar_copy _tet_jug_line_$~y ~tmp
}

//checks the location for out of bounds
//or already occupied..(not empty)
function fn_tet_DoesCollide(~x,~y)
{
	sp_sc_flow_if number cvar ~x < val "0"
	{
		set bool 1
	}
	else
	{
		sp_sc_flow_if number cvar ~x > val "18"
		{
			set bool 1
		}
		else
		{
			sp_sc_flow_if number cvar ~y < val "0"
			{
				set bool 1
			}
			else
			{
				//out of bound checks complete
				//now focus on jug comparisons
				sp_sc_cvar_substr ~tmp _tet_jug_line_$~y #~x 1
				sp_sc_flow_if number cvar ~tmp != val "0"
				{
					set bool 1
				}
				else
				{
					set bool 0
				}
			}
		}
	}
}

//will safely start a loop if one not already started
function .tetris_start(~slot)
{
    sp_sc_flow_if number cvar _tet_loop_busy == val "1"
    {
        say "please wait for current timer to unload"
    }
    else
    {
    	say "starting tetris"
    	sp_sc_func_exec fn_tet_ReloadGame
    	set _tet_spawn "1"
        set _tet_loop_run "1"
        set _tet_loop_busy "1"
        sp_sc_func_exec fn_tet_loop
    }
}

//will stop a loop if one is running
function .tetris_stop(~slot)
{
    sp_sc_flow_if number cvar _tet_loop_busy == val "1"
    {
    	say "stopping tetris"
        set _tet_loop_run "0"
    }
}

//this is the heart of the game
//1024 - 28 = 996
//996 / 28 = 35
//180/35 = 5.14
//so minimum 6
//lump into clumps of 996
function fn_tet_loop()
{

	sp_sc_flow_if number cvar _tet_spawn == val "1"
	{
		//reset the gate
		set _tet_spawn 0
		sp_sc_func_exec fn_tet_Spawn
		//check collision on new spawned object
		//that is victory/defeat condition
		set ~i 1
		sp_sc_flow_while number cvar ~i < val "5"
		{
			sp_sc_cvar_copy ~name1 _tet_seg_x_$i
			sp_sc_cvar_copy ~name2 _tet_seg_y_$i
			sp_sc_func_exec fn_tet_DoesCollide #~name1 #~name2
			sp_sc_flow_if number cvar _tet_bool == val "1"
			{
				say "Game Over"
				sp_sc_func_exec .tetris_stop 0
			}
			add ~i 1
		}

	}
	else
	{
		//loop code here
		set ~collide 0
		set ~i 1
		sp_sc_flow_while number cvar ~i < val "5"
		{
			sp_sc_cvar_copy ~new_y_$i _tet_seg_y_$i
			add ~new_y_$i -1
			sp_sc_cvar_copy ~name1 _tet_seg_x_$i
			sp_sc_cvar_copy ~name2 ~new_y_$i
			sp_sc_func_exec fn_tet_DoesCollide #~name1 #~name2
			sp_sc_flow_if number cvar _tet_bool == val "1"
			{
				set ~collide 1
			}
			add ~i 1
		}
		sp_sc_flow_if number cvar ~collide == val "0"
		{
			//apply gravity
			set ~i 1
			sp_sc_flow_while number cvar ~i < val "5"
			{
				sp_sc_cvar_copy _tet_seg_y_$i ~new_y_$i
				add ~i 1
			}	
		}
		else
		{
			//landed on something, now we want to spawn next frame
			//also apply line destruction here, checking only lines that the last segment consisted of
			set ~i 1
			sp_sc_flow_while number cvar ~i < val "5"
			{
				//get the y position of segment
				sp_sc_cvar_copy ~tmp _tet_seg_y_$i
				//get the line contents at there
				sp_sc_cvar_copy ~tmp2 _tet_jug_line_$~tmp
				sp_sc_flow_if text cvar ~tmp2 == val "1111111111"
				{

					sp_sc_cvar_copy ~tmp2 _tet_jug_height
					add ~tmp2 -1
					sp_sc_flow_while number cvar ~tmp < cvar ~tmp2
					{
						sp_sc_cvar_copy ~tmp3 ~tmp
						add ~tmp3 1
						sp_sc_cvar_copy _tet_jug_line_$~tmp _tet_jug_line_$~tmp3

						add ~tmp 1
					}
					set _tet_jug_line_$~tmp2 "0000000000"
				}
				add ~i 1
			}
			set _tet_spawn 1
		}
	}
	sp_sc_func_exec fn_tet_WriteToJug #_tet_seg_x_0 #_tet_seg_y_0 #_tet_shape
	sp_sc_func_exec fn_tet_WriteToJug #_tet_seg_x_1 #_tet_seg_y_1 #_tet_shape
	sp_sc_func_exec fn_tet_WriteToJug #_tet_seg_x_2 #_tet_seg_y_2 #_tet_shape
	sp_sc_func_exec fn_tet_WriteToJug #_tet_seg_x_3 #_tet_seg_y_3 #_tet_shape

	set ~fx 160;set ~fy 120;sp_sc_cvar_math_sub ~fx 240;sp_sc_cvar_math_sub ~fy 240
 	sset ~string * xv #~fx yv #~fy picn pics/zz

	add ~fy 480
	add ~fy -26
 	set ~j 0
 	set ~count 29
 	sp_sc_flow_while number cvar ~j < cvar _tet_jug_height
 	{
 		set ~i 0
 		sp_sc_flow_while number cvar ~i < cvar _tet_jug_width
 		{
 			sp_sc_cvar_substr ~color _tet_jug_line_$~j #~i 1
 			sp_sc_flow_if number cvar ~color != val "0"
 			{
 				//say "found tile"
 				sp_sc_cvar_copy ~color _tet_pics_$~color
 				set ~tmp "26"
 				sp_sc_cvar_math_mul ~tmp #~i
 				add ~tmp -80;sp_sc_cvar_copy ~fx ~tmp
 				set ~tmp "-26"
 				sp_sc_cvar_math_mul ~tmp ~j
 				add ~tmp #~fy;sp_sc_cvar_copy ~yy ~tmp
 				sset ~tmp xv #~fx yv #~yy picn pics/$~color
 				sp_sc_cvar_append ~string " " #~tmp
 				add ~count 28
 				sp_sc_flow_if number cvar ~count > val "968"
 				{
 					say inside #~string
 					sp_sv_print_sp_broadcast 45 #~string
 					set ~count 0
 					zero ~string
 				}
 			}
 			
 			add ~i 1
 		}
 		add ~j 1
 	}
 	say after #~string
 	sp_sv_print_sp_broadcast 45 #~string
 	//say "fn_tet_loop"
 	

 	//
 	//say #~string

	sp_sc_flow_if number cvar _tet_loop_run == val "1"
	{
	   sp_sc_timer #_tet_loop_speed "sp_sc_func_exec fn_tet_loop"
	}
	else
	{
	   set _tet_loop_busy 0
	}
}

function .test(~slot)
{
	set ~lol "string "
	set ~i 0
	sp_sc_flow_while number cvar ~i < val "990"
	{
		sp_sc_cvar_append ~lol "O"
		add ~i 1
	}
	sp_sv_print_sp_broadcast 45 #~lol
}


function .tetris_left(~slot)
{
	set ~collide 0
	set ~i 1

	sp_sc_flow_while number cvar ~i < val "5"
	{
		sp_sc_cvar_copy ~new_x_$i _tet_seg_x_$i
		add ~new_x_$i -1
		sp_sc_cvar_copy ~name1 ~new_x_$i
		sp_sc_cvar_copy ~name2 _tet_seg_y_$i
		sp_sc_func_exec fn_tet_DoesCollide #~name1 #~name2
		sp_sc_flow_if number cvar _tet_bool == val "1"
		{
			set ~collide 1
		}
		add ~i 1
	}
	sp_sc_flow_if number cvar ~collide == val "0"
	{
		set ~i 1
		sp_sc_flow_while number cvar ~i < val "5"
		{
			sp_sc_cvar_copy _tet_seg_x_$i ~new_x_$i
			add ~i 1
		}
	}
}
function .tetris_right(~slot)
{
	set ~collide 0
	set ~i 1

	sp_sc_flow_while number cvar ~i < val "5"
	{
		sp_sc_cvar_copy ~new_x_$i _tet_seg_x_$i
		add ~new_x_$i 1
		
		sp_sc_cvar_copy ~name1 ~new_x_$i
		sp_sc_cvar_copy ~name2 _tet_seg_y_$i

		sp_sc_func_exec fn_tet_DoesCollide #~name1 #~name2
		sp_sc_flow_if number cvar _tet_bool == val "1"
		{
			set ~collide 1
		}
		add ~i 1
	}
	sp_sc_flow_if number cvar ~collide == val "0"
	{
		set ~i 1
		sp_sc_flow_while number cvar ~i < val "5"
		{
			sp_sc_cvar_copy _tet_seg_x_$i ~new_x_$i

			add ~i 1
		}
	}
}
//function .tetris_down(~slot)
//{
//	set ~i 0
//	sp_sc_flow_while number cvar ~i < val "4"
//	{
//
//	}
//}
//function .tetris_harddrop(~slot)
//{
//	set ~i 0
//	sp_sc_flow_while number cvar ~i < val "4"
//	{
//
//	}
//}
//clockwise
function .tetris_rotate1(~slot)
{

	set ~collide 0
	set ~i 1

	sp_sc_flow_while number cvar ~i < val "5"
	{
		//pX=pX+(pX-bX)
		//pY=pY+(pY-bY)
		//newoffY=oldoffX*-1
		//newoffX=oldoffY*-1 
		sp_sc_cvar_copy ~tmp_x_$i _tet_seg_x_$i
		sp_sc_cvar_copy ~tmp_y_$i _tet_seg_y_$i
		sp_sc_cvar_math_sub ~tmp_x_$i _tet_seg_x_$_tet_seg_base
		sp_sc_cvar_math_sub ~tmp_y_$i _tet_seg_y_$_tet_seg_base
		sp_sc_cvar_math_mul ~tmp_x_$i -1
		sp_sc_cvar_math_mul ~tmp_y_$i -1
		sp_sc_cvar_copy ~new_x_$i _tet_seg_x_$_tet_seg_base
		sp_sc_cvar_copy ~new_y_$i _tet_seg_y_$_tet_seg_base
		sp_sc_cvar_copy ~name ~tmp_x_$i
		add ~new_x_$i #~name
		sp_sc_cvar_copy ~name ~tmp_x_$i
		add ~new_y_$i #~name
		sp_sc_cvar_copy ~new_x_$i _tet_seg_y_$i;
		sp_sc_cvar_copy ~new_y_$i _tet_seg_x_$i;

		sp_sc_cvar_copy ~name1 ~new_x_$i
		sp_sc_cvar_copy ~name2 ~new_y_$i
		sp_sc_func_exec fn_tet_DoesCollide #~name1 #~name2
		sp_sc_flow_if number cvar _tet_bool == val "1"
		{
			set ~collide 1
		}
		add ~i 1
	}
	sp_sc_flow_if number cvar ~collide == val "0"
	{
		set ~i 1
		sp_sc_flow_while number cvar ~i < val "5"
		{
			sp_sc_cvar_copy _tet_seg_x_$i ~new_x_$i
			sp_sc_cvar_copy _tet_seg_y_$i ~new_y_$i
			add ~i 1
		}
	}
}
//anticlockwise
function .tetris_rotate2(~slot)
{
	set ~collide 0
	set ~i 1

	sp_sc_flow_while number cvar ~i < val "5"
	{
		//pX=pX+(pX-bX)
		//pY=pY+(pY-bY)
		//newoffY=oldoffX
		//newoffX=oldoffY*-1 
		sp_sc_cvar_copy ~tmp_x_$i _tet_seg_x_$i
		sp_sc_cvar_copy ~tmp_y_$i _tet_seg_y_$i
		sp_sc_cvar_math_sub ~tmp_x_$i _tet_seg_x_$_tet_seg_base
		sp_sc_cvar_math_sub ~tmp_y_$i _tet_seg_y_$_tet_seg_base
		sp_sc_cvar_math_mul ~tmp_x_$i -1
		sp_sc_cvar_math_mul ~tmp_y_$i -1
		sp_sc_cvar_copy ~new_x_$i _tet_seg_x_$_tet_seg_base
		sp_sc_cvar_copy ~new_y_$i _tet_seg_y_$_tet_seg_base
		sp_sc_cvar_copy ~name ~tmp_x_$i
		add ~new_x_$i #~name
		sp_sc_cvar_copy ~name ~tmp_x_$i
		add ~new_y_$i #~name
		sp_sc_cvar_copy ~new_x_$i _tet_seg_y_$i;
		sp_sc_cvar_copy ~new_y_$i _tet_seg_x_$i;
		sp_sc_cvar_copy ~name1 ~new_x_$i
		sp_sc_cvar_copy ~name2 ~new_y_$i
		sp_sc_func_exec fn_tet_DoesCollide #~name1 #~name2
		sp_sc_flow_if number cvar _tet_bool == val "1"
		{
			set ~collide 1
		}
		add ~i 1
	}
	sp_sc_flow_if number cvar ~collide == val "0"
	{
		set ~i 1
		sp_sc_flow_while number cvar ~i < val "5"
		{
			sp_sc_cvar_copy _tet_seg_x_$i ~new_x_$i
			sp_sc_cvar_copy _tet_seg_y_$i ~new_y_$i
			add ~i 1
		}
	}
}